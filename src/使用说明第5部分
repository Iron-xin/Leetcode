由于深度遍历广度遍历回溯，以及动态规划是重点，将优先对这一部分加强刷题
第五部分将对动态规划进行刷题。
直接按通过率刷了
6.7号记录，由于困难题很多都需要跳过的，所以跳过的题就不再记录了
6.4
1.Leetcode----------338. 比特位计数
2.Leetcode----------1402. 做菜顺序
                        (排序后，从后往前加 两个变量)
3.Leetcode----------1314. 矩阵区域和
                            （跳过了，看题频吧）
4.Leetcode----------1277. 统计全为 1 的正方形子矩阵
                            主要还是要理解动态规划的公式      dp是当前某个位置，所有的正方形种类的个数
                            dp[i][j] = min(dp[i-1][i],dp[i][j-1],dp[i-1][j-1])
5.Leetcode----------877. 石子游戏
                                最终得到转移方程     pile是原数组。
                                用d[i][j]表示从i到j这一段数组，先手的人比后手的人能多多少（负数表示少的最少情况）
                                因此，dpij表示从i到J,能赢多少分，等于取i时的情况和取j时的情况取最大值
                                而取i的情况，就是当前i的值，减去从i+1到j时能赢多少分，因为你取了i，先手就交换了，剩下
                                的相当于是你先取了i，接下来将会输多少分（从I+1到j，因为别人会在这个区间赢回最大值）
                                因此是做减法
                                dp[i][j] = max { pile[i] - dp[i+1][j] , pile[j] - dp[i][j-1] }
6.Leetcode----------1025. 除数博弈
                            java boolean数组默认false
                            动态转移方程就是，给某个数，我能否找到一个使先手输的，这样我先取了后，后手作为剩下的先手
                            一定会输，如果找不到，那么我就输了。
7.剑指offer----------47.礼物的最大价值
                            基础题，最简单的
                            dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1])+grid[i][j];

8.Leetcode----------96. 不同的二叉搜索树
                                （懂的就懂，不懂的就不懂,这道题意义不大）
9 Leetcode----------64. 最小路径和
                            （之前做过，第一部分的）（且本题和47题特别像）
10 Leetcode----------714. 买卖股票的最佳时机含手续费
                            （有点东西）
--------------------------------------------------------------------------------------------------------------
6.5
1.Leetcode----------120. 三角形最小路径和
                            dp[i][j] = Math.min(dp[i+1][j], dp[i+1][j+1]) + curTr.get(j);
                            压缩的写法（考场上做出来就行？压缩的需要进阶的）
                            dp[j] = Math.min(dp[j],dp[j+1]) + curTr.get(j);
2.Leetcode----------1227. 飞机座位分配概率
                                概率题，画画图就知道，n大于1的时候，都是1/2，因此当某个人自己位置有的时候，他一定坐自己的
                                没必要分析动态规划啊。
3.剑指offer----------面试题63. 股票的最大利润
                                本题与714不同，714是操作多次，本题就操作一次。因此本题的思路是，遍历过程中，不断更新成本
                                最低的股票，并同时计算以当前记录的最低成本的利润。
4.Leetcode----------983. 最低票价
                            倒着来推，很巧妙
5.Leetcode----------712. 两个字符串的最小ASCII删除和
                            和最长公共子串有点联系，但也不完全是，在子串尽量长的情况下，使得码表最大
                            典型的二维表，一行一列为初始化，然后慢慢填。
6.Leetcode----------95. 不同的二叉搜索树 II
                            看96题 卡特兰数，你懂吗，不懂做个屁
7.Leetcode----------303. 区域和检索 - 数组不可变
                            (这个题也有点闹眼子)
8.Leetcode----------647. 回文子串
                        （本题是个重点题  两种方法，一个是动态规划，一个是中心扩展）
--------------------------------------------------------------------------------------------------------------
6.6
1.Leetcode----------413. 等差数列划分
                        本来可以用二维数组，但是很巧妙，一维的就可以。二维的直接求结果，一维的再用个sum
                        且二维数组需要斜着填，反正我自己思路这样，但是不会写
                         dp_num[i]=dp_num[i-1]+1;
                                        sum+=dp_num[i];  用这两句代替二维数组
2.Leetcode----------1140. 石子游戏 II
                                放弃
3.Leetcode----------931. 下降路径最小和
                            两边的边界和中间的情况
4.Leetcode----------62. 不同路径
                            (第一部分做过)

--------------------------------------------------------------------------------------------------------------
6.7
1.Leetcode----------312. 戳气球
                            (难度有点大啊)自底向上，且两边加虚拟气球，因此在戳破某个气球时，应该认为其两段的都已经该戳
                            的都戳了。
2.Leetcode----------1289. 下降路径最小和  II
                                记录的n^3的写法，有优化的版本，就是每次用两个变量记录最大和次大的值
3.剑指offer----------42. 连续子数组的最大和
                            （同力扣53题，类似于滑动窗口，但是其实也是动态规划）
4.面试金典----------面试题 16.17. 连续数列
                            同剑指offer42题，这里提示下，在53题中，记录了分治的写法
5.Leetcode----------1143. 最长公共子序列
                             "ace" 是 "abcde" 的子序列,所以本题容易想到
6.Leetcode----------72. 编辑距离
                            （原来记录过的）  注意本题和上面的一题，很多这类题，都增加了原数组的边界情况。
7.Leetcode----------1130. 叶值的最小代价生成树
                            （跳过了）
8.Leetcode----------1278. 分割回文串 III
                              （跳过了）
--------------------------------------------------------------------------------------------------------------
6.8
1.Leetcode----------279. 完全平方数
                             dp[i] = Math.min(dp[i], dp[i - j * j] + 1); // 动态转移方程
2.Leetcode----------343. 整数拆分
                            （同剑指offer第14题）
3.Leetcode----------516. 最长回文子序列
                            行从下往上，列从左往右
                                             if(s.charAt(i) == s.charAt(j)){
                                                dp[j][i] = dp[j+1][i-1] + 2;
                                            }else{
                                                dp[j][i] = Math.max(dp[j+1][i],dp[j][i-1]);
                                            }
4.Leetcode----------646. 最长数对链（本题有很多类似题）
                         if(pairs[i][0]>pairs[j][1]){
                                dp[i]=Math.max(dp[i],dp[j]+1);
5.Leetcode---------- 121. 买卖股票的最佳时机
                            （原来做过）
6.Leetcode----------309. 最佳买卖股票时机含冷冻期
                                （和714类似，只不过本题还多一种状态）
--------------------------------------------------------------------------------------------------------------
6.9
1.剑指offer----------面试题14- I. 剪绳子
                                (同343题)
2.面试金典----------面试题 17.16. 按摩师
                            （简单题，注意和股票题不同，本题虽然有个冷冻期，但是吧，只有1个加的状态,所以本题是个一维的状态）
3.Leetcode----------264. 丑数 II
                            （本题和剑指offer的丑数题一样，没什么好方法，会做就是会做，记好方法即可）
4.Leetcode----------486. 预测赢家
                        （本题同877题，但建议用本题记录的写法，因为更容易理解过程，注意是从下往上，从左往后的遍历）
5.Leetcode----------740. 删除与获得点数
                            (这题看评论，可以和198打家劫舍对应起来)
6.Leetcode----------53.最大子序和
                        （原来做过）
7.面试金典----------面试题 08.11. 硬币
                            （经典题目）
